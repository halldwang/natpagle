(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{217:function(t,e,a){"use strict";a.r(e);var r=a(0),s=Object(r.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"简介"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#简介"}},[t._v("#")]),t._v(" 简介")]),t._v(" "),a("p",[t._v("托马斯·沃森（Thomas Watson）曾有一句名言：“我认为世界上可能有五台电脑的市场。”。那是在1948年。那时，每个人都知道计算机只能用于两件事：数学和工程学。即使是科技界最有头脑的人也无法预测，有一天，计算机将能够把西班牙语翻译成英语，或者模拟整个天气系统。当时，最快的机器是IBM的SSEC，每秒50次乘法，多个用户终端共享一个处理器。晶体管改变了一切，但科技公司的远见者仍然没有达到目标。肯·奥尔森（Ken Olson）在1977年做出了另一个著名的愚蠢预测，当时他说“没有理由任何人想要在家里有一台电脑”。")]),t._v(" "),a("p",[t._v("当今，计算机不仅仅是为科学家和工程师服务的，70年前，认为机器不仅仅能做数学的想法根本不是直觉。沃森没有意识到计算机是如何改变一个社会的，他也没有意识到数学的变革和进化的力量。")]),t._v(" "),a("p",[t._v("但并不是每个人都忽视了计算机和数学的潜力。John McCarthy在1958年发明了Lisp，这是一种革命性的基于算法的语言，开创了计算的新纪元。从一开始，Lisp就在使用抽象层-编译器、解释器、虚拟化-来推动计算机从核心数学机器发展到今天的发展方面发挥了重要作用。")]),t._v(" "),a("p",[t._v("Lisp衍生的Scheme是JavaScript的直接祖先。现在我们又回到了原点。如果计算机的核心是只做数学的机器，那么基于数学的编程范例理所当然会出类拔萃。")]),t._v(" "),a("p",[t._v("这里使用的术语“数学”不是用来描述计算机显然能做的“数字运算”，而是用来描述离散数学：研究离散的数学结构，如逻辑中的语句或计算机语言的指令。通过将代码视为一种离散的数学结构，我们可以将数学中的概念和思想应用到代码中。这就是函数式编程在人工智能、图形搜索、模式识别和计算机科学中的其他重大挑战中发挥如此重要作用的原因。")]),t._v(" "),a("p",[t._v("在本章中，我们将试验其中一些概念及其在日常编程挑战中的应用。它们将包括：")]),t._v(" "),a("ul",[a("li",[t._v("Category theory 范畴论")]),t._v(" "),a("li",[t._v("Morphisms 态射")]),t._v(" "),a("li",[t._v("Functors 函子")]),t._v(" "),a("li",[t._v("Maybes")]),t._v(" "),a("li",[t._v("Promises")]),t._v(" "),a("li",[t._v("lenses 状态管理（依赖）"),a("a",{attrs:{href:"https://blog.csdn.net/weixin_34032792/article/details/87963097",target:"_blank",rel:"noopener noreferrer"}},[t._v("原理"),a("OutboundLink")],1)]),t._v(" "),a("li",[t._v("Function composition 函数组合")])]),t._v(" "),a("p",[t._v("有了这些概念，才能够非常容易和安全地编写函数库和api。我们将从解释范畴理论到用JavaScript正式实现它。")]),t._v(" "),a("h2",{attrs:{id:"范畴论"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#范畴论"}},[t._v("#")]),t._v(" 范畴论")]),t._v(" "),a("p",[t._v("范畴理论是赋予功能构成权力的理论概念。（此处有删减，举例："),a("a",{attrs:{href:"https://blog.csdn.net/weixin_43801661/article/details/84670359",target:"_blank",rel:"noopener noreferrer"}},[t._v("让你烤个面包"),a("OutboundLink")],1),t._v("。）")]),t._v(" "),a("h3",{attrs:{id:"范畴论简述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#范畴论简述"}},[t._v("#")]),t._v(" 范畴论简述")]),t._v(" "),a("p",[t._v("范畴论不是一个很难的概念。 它在数学上的位置足以填满整个研究生水平的大学课程，但是在计算机编程中的位置可以很容易地总结出来。")]),t._v(" "),a("p",[t._v("爱因斯坦曾经说过，“如果你不能向一个6岁的孩子解释它，那么你自己也不清楚”。因此，本着向6岁儿童解释的精神，范畴理论只是把这些点联系起来。尽管它可能过于简化范畴理论，但它确实很好地以一种直截了当的方式解释了我们需要知道的东西。")]),t._v(" "),a("p",[t._v("首先你需要知道一些术语。类别只是具有相同类型的集合。在JavaScript中，它们是数组或对象，包含显式声明为数字、字符串、布尔值、日期、节点等的变量。态射是纯函数，当给定一组特定的输入时，总是返回相同的输出。同态操作仅限于一个类别，而多态操作可以操作多个类别。例如，同态函数乘法适用于数字类型，但多态函数加法也可以对字符串起作用。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://blog.ahthw.com/wp-content/uploads/2019/12/f8b.png",alt:"img"}})])])}),[],!1,null,null,null);e.default=s.exports}}]);